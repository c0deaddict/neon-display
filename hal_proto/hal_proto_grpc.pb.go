// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: hal_proto.proto

package hal_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HalClient is the client API for Hal service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HalClient interface {
	WatchEvents(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Hal_WatchEventsClient, error)
	SetDisplayPower(ctx context.Context, in *DisplayPower, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SetLedsPower(ctx context.Context, in *LedsPower, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type halClient struct {
	cc grpc.ClientConnInterface
}

func NewHalClient(cc grpc.ClientConnInterface) HalClient {
	return &halClient{cc}
}

func (c *halClient) WatchEvents(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Hal_WatchEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Hal_ServiceDesc.Streams[0], "/hal_proto.Hal/WatchEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &halWatchEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Hal_WatchEventsClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type halWatchEventsClient struct {
	grpc.ClientStream
}

func (x *halWatchEventsClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *halClient) SetDisplayPower(ctx context.Context, in *DisplayPower, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/hal_proto.Hal/SetDisplayPower", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *halClient) SetLedsPower(ctx context.Context, in *LedsPower, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/hal_proto.Hal/SetLedsPower", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HalServer is the server API for Hal service.
// All implementations must embed UnimplementedHalServer
// for forward compatibility
type HalServer interface {
	WatchEvents(*emptypb.Empty, Hal_WatchEventsServer) error
	SetDisplayPower(context.Context, *DisplayPower) (*emptypb.Empty, error)
	SetLedsPower(context.Context, *LedsPower) (*emptypb.Empty, error)
	mustEmbedUnimplementedHalServer()
}

// UnimplementedHalServer must be embedded to have forward compatible implementations.
type UnimplementedHalServer struct {
}

func (UnimplementedHalServer) WatchEvents(*emptypb.Empty, Hal_WatchEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchEvents not implemented")
}
func (UnimplementedHalServer) SetDisplayPower(context.Context, *DisplayPower) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDisplayPower not implemented")
}
func (UnimplementedHalServer) SetLedsPower(context.Context, *LedsPower) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLedsPower not implemented")
}
func (UnimplementedHalServer) mustEmbedUnimplementedHalServer() {}

// UnsafeHalServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HalServer will
// result in compilation errors.
type UnsafeHalServer interface {
	mustEmbedUnimplementedHalServer()
}

func RegisterHalServer(s grpc.ServiceRegistrar, srv HalServer) {
	s.RegisterService(&Hal_ServiceDesc, srv)
}

func _Hal_WatchEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HalServer).WatchEvents(m, &halWatchEventsServer{stream})
}

type Hal_WatchEventsServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type halWatchEventsServer struct {
	grpc.ServerStream
}

func (x *halWatchEventsServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

func _Hal_SetDisplayPower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisplayPower)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HalServer).SetDisplayPower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hal_proto.Hal/SetDisplayPower",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HalServer).SetDisplayPower(ctx, req.(*DisplayPower))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hal_SetLedsPower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LedsPower)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HalServer).SetLedsPower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hal_proto.Hal/SetLedsPower",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HalServer).SetLedsPower(ctx, req.(*LedsPower))
	}
	return interceptor(ctx, in, info, handler)
}

// Hal_ServiceDesc is the grpc.ServiceDesc for Hal service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Hal_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hal_proto.Hal",
	HandlerType: (*HalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetDisplayPower",
			Handler:    _Hal_SetDisplayPower_Handler,
		},
		{
			MethodName: "SetLedsPower",
			Handler:    _Hal_SetLedsPower_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchEvents",
			Handler:       _Hal_WatchEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "hal_proto.proto",
}
